export buildAst

import 'astring' { generate }
import 'peg-parser' { parse as pegParse }
import 'io' { pureIO }
import 'node-utils-eio' { readExports }
import 'reader-either-io' { liftIO, pureReio as pureR, askReio as askR }
import 'ast-utils' { getFunkritUseUrls, updateFunkritUseImports, addFunkritFullUse }

buildAst :: String -> Reio(AST)
buildAst = str -> {

    _ast_ <- map(pegParse, pureR(str))

    {noramda} <- askR()

    [urls, ast] = {{
        urls = getFunkritUseUrls(_ast_)
        hasRamda = indexOf('ramda', urls) > -1
        if(noramda || hasRamda){
            return [urls, _ast_]
        } else {
            return [append('ramda', urls), addFunkritFullUse('ramda', _ast_)]
        }
    }}

    /** <- liftIO $ consoleError(ast)*/

    exports <- liftIO $ sequence(pureIO, map(readExports, urls)) // exports = [{url::String, exports::[String]}]

    console.log("EXPORTS", exports)

    return pureR $ exports //reduce(updateFunkritUseImports, ast, exports)
}

