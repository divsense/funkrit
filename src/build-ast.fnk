export build
use 'ramda'

import 'astring' { generate }
import 'peg-parser' { parse as pegParse }
import 'pio' { purePIO, mapAll }
import 'node-utils-pio' { readExportedNames, writeToFile }
import 'reader-either-pio' { liftPIO, pureRepio }
import 'ast-utils' { getFunkritUseImports, updateFunkritUseImports }

sourceValue :: {source::{value::String}} -> String
sourceValue = path $ ['source', 'value']

build :: String -> Repio(AST)
build = str -> {
    rawAst <- map(pegParse, pureRepio(str))

    uses = getFunkritUseImports(rawAst)

    exports <- liftPIO $ mapAll(readExportedNames) $ map(sourceValue, uses) // exports = [{url::String, exports::[String]}]

    ast = reduce(updateFunkritUseImports, rawAst, exports)

    options <- askRepio()

    {astonly, output} = options

    if(astonly) {
        return pureRepio(ast)
    }

    code <- map(generate, pureRepio(ast))

    return liftPIO $ writeToFile(output, code)
}

