{ generate } <~ 'astring' 
{ parse as pegParse } <~ 'peg-parser' 
{ RightIO } <~ 'either-io' 
{ logError } <~ 'node-utils-io' 
{ readExports } <~ 'node-utils-eio' 
{ liftIO, pureReio as pureR, askReio as askR } <~ 'reader-either-io' 
{ getFunkritUseUrls, updateFunkritUseImports, addFunkritFullUse } <~ 'ast-utils' 

//buildAst :: string -> Reio(AST)
buildAst = str -> {

    _ast_ <- map(pegParse, pureR(str))

    {noramda} <- askR()

    [urls, ast] = {{
        urls = getFunkritUseUrls(_ast_)
        hasRamda = indexOf('ramda', urls) > -1

        if(noramda || hasRamda){
            return [urls, _ast_]
        } else {
            return [append('ramda', urls), addFunkritFullUse('ramda', _ast_)]
        }
    }}

    * <- liftIO $ logError("URLS: " + urls)

    exports <- liftIO $ sequence(RightIO, map(readExports, urls)) // exports = [{url::String, exports::[String]}]

    console.log("EXPORTS", exports)

    return pureR $ exports //reduce(updateFunkritUseImports, ast, exports)
}

