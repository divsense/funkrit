{ Node, Program, Statement, ImportDeclaration, ImportSpecifier } <: "./ast-types"
{ Settings, StdLib } <: './ast-builder'
{ Result_Monad } <: './result' 

{ travel } <+ './ast-travel'
{ build } <+ './ast-builder'
{ Result } <+ './result'

FunkName := {
    imported: string,
    local: ?string
}

FunkLib := {
    source: string,
    names: FunkName[]
}

Config := {
    code: string,
    stdLib: StdLib,
    dynLib: FunkLib[]
}

toFunkName :: ImportSpecifier -> FunkName
toFunkName = spec -> ({
    imported: view(@imported@name, spec),
    local: view(@local@name, spec)
})

toFunkLib :: ImportDeclaration -> FunkLib
toFunkLib = node -> ({
    source: view(@source@value, node),
    names: (map(toFunkName) . #specifiers) $ node
})

getImports :: Statement[] -> FunkLib[]
getImports =
     map(toFunkLib)
    . filter $ propEq('type', 'ImportDeclaration')

sandbox :: Config -> Result_Monad<FunkLib[]>
sandbox = {code, stdLib, dynLib} -> {

    program <- build $ {code, stdLib, commonJs: false}

    imports = getImports(program <.> body)

    return Result $ imports

}

