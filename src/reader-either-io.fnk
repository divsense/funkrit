// Reio Monad
// ReaderT EitherT Either PIO
//
{ ReaderT, liftReaderT } <~ 'reader' 
{ runEitherT, liftEitherT } <~ 'either' 
{ RightIO, LeftIO, runEIO } <~ 'either-io' 

pureReio :: a -> ReaderT EitherIO a
pureReio = a -> ReaderT $ r -> RightIO(a)

failReio :: a -> EitherT IO Either a
failReio = a -> ReaderT $ r -> LeftIO(a)

runReio :: r -> ReaderT m a -> a
runReio = (m, r) -> runEIO $ prop('run', m) $ r

liftIO :: IO a -> ReaderT IO a
liftIO = liftReaderT . liftEitherT

askReio :: () -> ReaderT IO r
askReio = () -> ReaderT $ RightIO

