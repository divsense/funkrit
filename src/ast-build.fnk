{ Node, ImportDeclaration } <: "./ast-types"
{ IO_Monad } <: './io' 

{ parse as pegParse } <+ './peg-parser' 
{ IO, pureIO } <+ './io' 

/*{ getFunkritUseUrls, updateFunkritUseImports, addFunkritFullUse } <+ 'ast-utils' */

makeFunkritFullUse :: string -> ImportDeclaration
makeFunkritFullUse = name -> ({
  type: 'ImportDeclaration',
  source: {
    type: 'Literal',
    value: name
  },
  specifiers: [],
  funkrit: { use: 'Full' }
})

addFunkritFullUse :: (string, Node) -> Node
addFunkritFullUse = (name, ast) -> over(@body, prepend $ makeFunkritFullUse $ name, ast)

build :: string -> IO<Node>
build = str -> {

    ast0 <- pegParse <^> pureIO(str)

    ast1 = addFunkritFullUse("ramda", ast0)


    return pureIO $ ast1

}

