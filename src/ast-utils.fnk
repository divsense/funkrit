export getFunkritUseUrls, updateFunkritUseImports, addFunkritFullUse

import_type '../libs/ast-types' { Node }

/*
newtype AST = {
  type: string,
  body: Statement[]
}

newtype Identifier = {
  type: string,
  name: string
}

newtype ImportSpec = {
  type: string,
  imported: Identifier,
  local: Identifier
}

newtype ImportNode = {
  type: string,
  source: { value: string },
  specifiers: ImportSpec[],
  funkrit: { use: string }
}

newtype LibExports = {
  url: string,
  exports: string[]
}
*/

libUrl :: [String]
libUrl = ['source', 'value']

funkritUse :: [String]
funkritUse = ['funkrit', 'use']

isFunkritUseImport :: ImportNode -> Bool
isFunkritUseImport = allPass $ [propEq('type', 'ImportDeclaration'), has('funkrit')]

isImportOf :: String -> ImportNode -> Bool
isImportOf = pathEq $ libUrl

isTypeOfUse :: String -> ImportNode -> Bool
isTypeOfUse = pathEq(funkritUse)

getFunkritUseUrls ::  AST -> [String]
getFunkritUseUrls = map(path(libUrl)) . filter(isFunkritUseImport) . prop('body')

findUseIndex ::  String -> [Node] -> Interger
findUseIndex = url -> findIndex $ allPass $ [isImportOf(url), isFunkritUseImport]

setPropSpecs :: [ImportSpec] -> ImportNode -> ImportNode
setPropSpecs = set(lensProp $ 'specifiers')

makeImportSpec :: String -> ImportSpec
makeImportSpec = name -> ({
    type: 'ImportSpecifier',
    imported: {
        type: 'Identifier',
        name
    },
    local: {
        type: 'Identifier',
        name
    }
})

makeFunkritFullUse :: String -> ImportDeclaration
makeFunkritFullUse = name -> ({
  type: 'ImportDeclaration',
  source: { value: name },
  specifiers: [],
  funkrit: { use: 'Full' }
})

makeAllSpecs :: [String] -> ImportNode -> ImportNode
makeAllSpecs = names -> setPropSpecs $ map(makeImportSpec, names)

isNormalImport :: ImportSpecifier -> Bool
isNormalImport = x -> equals(path(['imported','name'], x), path(['local','name'], x))

exclusiveImport :: [ImportSpecifier], ImportSpecifier -> [ImportSpecifier]
exclusiveImport = (specs, x) -> isNormalImport(x) ? specs : append(x, specs)

updateExclusiveSpecs :: [String] -> ImportNode -> ImportNode
updateExclusiveSpecs = names -> over(lensProp('specifiers'), specs ->
    reduce((res, name) -> {
        i = findIndex(pathEq(['imported', 'name'], name), specs)
        return i === -1 ? append(makeImportSpec $ name, res)
                        : exclusiveImport(res, nth(i, specs))
    }, [], names)
)

updateImportNode :: [String] -> ImportNode -> ImportNode
updateImportNode = names -> cond $
[
    [ isTypeOfUse $ 'Full', makeAllSpecs(names) ],
    [ isTypeOfUse $ 'Exclusive', updateExclusiveSpecs(names) ]
]

updateFunkritUseImports :: AST, LibExports -> AST
updateFunkritUseImports = (ast, exp) -> over(lensProp $ 'body', body -> {
    {url, exports} = exp
    return over(lensIndex(findUseIndex(url) $ body), updateImportNode(exports), body)
}, ast)

addFunkritFullUse :: String, AST -> AST
addFunkritFullUse = (name, ast) -> over(lensProp $ 'body', prepend $ makeFunkritFullUse(name), ast)

