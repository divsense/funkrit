/**
 * @file             : io.fnk
 * License           : MIT
 * @author           : Oleg Kirichenko <oleg@divsense.com>
 * Date              : 23.02.2019
 * Last Modified Date: 26.02.2019
 * Last Modified By  : Oleg Kirichenko <oleg@divsense.com>
 */

{ Result_Monad, Error } <: "./result"
{ Result } <+ "./result"

Eff<A> := () -> Result_Monad<A>

IO_Monad<A> := {
    run: Eff<A>,
    pure(A): IO_Monad<A>,
    map<B>((A) -> B): IO_Monad<B>,
    chain<B>((A) -> IO_Monad<B>): IO_Monad<B>,
    ap<B>(IO_Monad<(A) -> B>): IO_Monad<B>
}

IO<A> :: Eff<A> -> IO_Monad<A>
IO = run -> ({
    run,

    pure :: A -> IO_Monad<A>
    pure: a -> IO $ () -> Result(a),

    map<B> :: (A -> B) -> IO_Monad<?B>
    map: f -> IO $ () -> f <^> run(),
    
    chain<B> :: (A -> IO_Monad<?B>) -> IO_Monad<?B>
    chain: f -> IO $ () -> run() >>= x -> (#run $ f $ x)(),

    ap<B> :: IO_Monad<A -> B> -> IO_Monad<?B>
    ap: mb -> IO $ () -> (#run $ mb)() >>= f -> f <^> run()
})

pureIO<A> :: A -> IO_Monad<A>
pureIO = a -> IO $ () -> Result(a)

failIO :: Error -> IO_Monad<null>
failIO = err -> IO $ () -> Result(null, err)

