IO_Monad<A> := {
    run: () -> A,
    pure(A): IO_Monad<A>,
    map<B>((A) -> B): IO_Monad<B>,
    chain<B>((A) -> IO_Monad<B>): IO_Monad<B>,
    ap<B>(IO_Monad<(A) -> B>): IO_Monad<B>
}

IO<A> :: (() -> A) -> IO_Monad<A>
IO = run -> ({
    run,

    pure :: A -> IO_Monad<A>
    pure: a -> IO $ () -> a,

    map<B> :: (A -> B) -> IO_Monad<B>
    map: f -> IO $ f . run,

    chain<B> :: (A -> IO_Monad<B>) -> IO_Monad<B>
    chain: f -> IO $ call . #run . f . run,

    ap<B> :: IO_Monad<A -> B> -> IO_Monad<B>
    ap: mb -> IO $ () -> ((call . #run) $ mb) $ run()
})

pureIO<A> :: A -> IO_Monad<A>
pureIO = a -> IO $ () -> a

